(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{156:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return b}));var n=a(1),o=a(9),r=(a(0),a(190)),l={id:"example3",title:"Deploying to EB and ECS + seeded volume",sidebar_label:"Deploying to EB and ECS + seeded volume"},i={id:"aws/examples/example3",title:"Deploying to EB and ECS + seeded volume",description:"Host configuration, seed data .ebextesntions",source:"@site/docs/aws/examples/example3.md",permalink:"/docs-and-blog/docs/aws/examples/example3",sidebar_label:"Deploying to EB and ECS + seeded volume",sidebar:"someSidebar",previous:{title:"Multi container with shared data",permalink:"/docs-and-blog/docs/aws/examples/example2"}},c=[{value:"Push images to ECR",id:"push-images-to-ecr",children:[]},{value:"eb extensions file and local deployment",id:"eb-extensions-file-and-local-deployment",children:[]},{value:"Deploy to cloud with EB",id:"deploy-to-cloud-with-eb",children:[]},{value:"Deploy with ECS",id:"deploy-with-ecs",children:[]}],s={rightToc:c};function b(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Host configuration, seed data .ebextesntions"),Object(r.b)("p",null,"Two node APIs"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Push images to ECR"),Object(r.b)("li",{parentName:"ol"},"Deploy locally with elastic beanstalk .ebextensions"),Object(r.b)("li",{parentName:"ol"},"Deploy to the cloud with elastic beanstalk"),Object(r.b)("li",{parentName:"ol"},"Then launch from docker compose to ECS (without Beanstalk)")),Object(r.b)("h2",{id:"push-images-to-ecr"},"Push images to ECR"),Object(r.b)("p",null,"Using the ",Object(r.b)("inlineCode",{parentName:"p"},"Dockerfile.aws.json")," deployment approach."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("ol",{parentName:"li"},Object(r.b)("li",{parentName:"ol"},"Create a repository in ecr for each api")))),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"aws ecr create-repository --repository-name api-1\naws ecr create-repository --repository-name api-2\n")),Object(r.b)("p",null,"Get the repositoryUri s"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("ol",Object(n.a)({parentName:"li"},{start:2}),Object(r.b)("li",{parentName:"ol"},"Tag both images with the repository uris")))),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"docker tag api-1 <uri>\ndocker tag api-2 <uri>\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("ol",Object(n.a)({parentName:"li"},{start:3}),Object(r.b)("li",{parentName:"ol"},"Login into ecr to push the images")))),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"aws ecr get-login --region us-west-2 --no-include-email | /bin/bash\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("ol",Object(n.a)({parentName:"li"},{start:4}),Object(r.b)("li",{parentName:"ol"},"Finally, push the images \ud83d\ude80")))),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"docker push <uri>\n")),Object(r.b)("h2",{id:"eb-extensions-file-and-local-deployment"},"eb extensions file and local deployment"),Object(r.b)("p",null,"Use eb extensions file to inject data into the EC2's host on launch. For this we need a ",Object(r.b)("inlineCode",{parentName:"p"},".ebextensions")," directory with a ",Object(r.b)("inlineCode",{parentName:"p"},"files.config")," file in it. The ",Object(r.b)("inlineCode",{parentName:"p"},"files.config")," file contains the instructions for creating json files with seeded data."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),'files:\n  "/var/lib/docker/volumes/my-named-shared-data/_data/api-1_data.json" :\n    mode: "000755"\n    owner: root\n    group: root\n    content: |\n      ["1", "2", "3"]\n  "/var/lib/docker/volumes/my-named-shared-data/_data/api-2_data.json" :\n    mode: "000755"\n    owner: root\n    group: root\n    content: |\n      {\n      "1": "1.1",\n      "2": "2.2",\n      "3": "3.3"\n      }\n')),Object(r.b)("h4",{id:"deploy-local"},"Deploy local"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Create a ",Object(r.b)("inlineCode",{parentName:"li"},"Dockerrun.aws.json")," with the definition of the containers adding the ECR repository uri for each one."),Object(r.b)("li",{parentName:"ol"},"Run eb")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),'eb init -k vockey -p "64bit Amazon Linux 2018.03 v2.20.3 running Multi-container Docker 19.03.6-ce (Generic)" --region us-west-2 for_eb\n')),Object(r.b)("p",null,"This creates an ",Object(r.b)("inlineCode",{parentName:"p"},".elasticbeanstalk")," directory with a config file"),Object(r.b)("ol",{start:3},Object(r.b)("li",{parentName:"ol"},"Running ",Object(r.b)("inlineCode",{parentName:"li"},"eb local run")," will launch both apis locally but it won't use the ebextensions file and thus, the seeded data won't be there.")),Object(r.b)("h2",{id:"deploy-to-cloud-with-eb"},"Deploy to cloud with EB"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Create a 1 machine stack in EB, it will use the ",Object(r.b)("inlineCode",{parentName:"li"},".elasticbeanstalk")," folder previously created with ",Object(r.b)("inlineCode",{parentName:"li"},"eb init ..."))),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"eb create my-prod --single\n")),Object(r.b)("ol",{start:2},Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},'Now we need to allow the apis ports so go into the aws console EC2 service and select the "my-prod" security group. Edit inbound rules, add rule with the port range (8080-8081) and 0.0.0.0/0 IP range.')),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"For accessing the api we can take the EB IP"))),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"aws elasticbeanstalk describe-environments --region us-west-2 --environment-names my-prod | grep EndpointURL\n")),Object(r.b)("p",null,"Making requests to those APIs will return the seeded data."),Object(r.b)("h2",{id:"deploy-with-ecs"},"Deploy with ECS"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"The one major thing that you can't do with Beanstalk that you can do with ECS-EC2 is run multiple tasks on the same host and reduce costs.")),Object(r.b)("p",null,"Set up four (4) large ECS optimized instances equally balanced across two (2) AZs for High Availability. With each of our api in its own task."),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"We need to create a cluster configuration")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"ecs-cli configure --cluster fancy-cluster --default-launch-type EC2 --config-name fancy-cluster --region us-west-2\n")),Object(r.b)("ol",{start:2},Object(r.b)("li",{parentName:"ol"},"Create a cluster based on the configuration")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"ecs-cli up --keypair vockey --capability-iam --size 4 --instance-type m4.large --cluster-config fancy-cluster --port 8080\n")),Object(r.b)("p",null,"This created an internet gateway, a couple of public subnets in a new VPC. It also creates 4 ECS optimized EC2 instance across 2 AZs"),Object(r.b)("ol",{start:3},Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},'Create a IAM task role. "Elastic Container Service Task" Use case. "AmazonECSTaskExecutionRolePolicy" permissions. Take the ARN of the role.')),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Create task definitions for api-1. Using the ecs-cli to create our task definition. All we have to do is provide it with our ",Object(r.b)("inlineCode",{parentName:"p"},"docker-compose")," file AND a small file called ",Object(r.b)("inlineCode",{parentName:"p"},"ecs-params.yaml")))),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"docker-compose")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'version: "3.0"\nservices:\n  api-1:\n    image: "<ecr uri>/api-1"\n    ports:\n      - "8080:3000"\n')),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"ecs-params.yaml")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'version: 1\ntask_definition:\n  task_execution_role: "arn:aws:iam::988770882877:role/fancy-task-role" # role ARN\n  task_size:\n    cpu_limit: "512"\n    mem_limit: "256"\n')),Object(r.b)("ol",{start:5},Object(r.b)("li",{parentName:"ol"},"Create the task definition")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"ecs-cli compose --file docker-compose.yaml --ecs-params ecs-params.yaml --region us-west-2 --project-name fancy-project --cluster-config fancy-cluster --cluster fancy-cluster create\n")),Object(r.b)("ol",{start:6},Object(r.b)("li",{parentName:"ol"},"Now we can run tasks manually from the ECS console and have the api running.")))}b.isMDXComponent=!0},190:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),o=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=o.a.createContext({}),b=function(e){var t=o.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i({},t,{},e)),a},p=function(e){var t=b(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=b(a),d=n,m=p["".concat(l,".").concat(d)]||p[d]||u[d]||r;return a?o.a.createElement(m,i({ref:t},s,{components:a})):o.a.createElement(m,i({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var s=2;s<r;s++)l[s]=a[s];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);