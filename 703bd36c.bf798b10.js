(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{165:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return s}));var n=a(1),r=a(9),o=(a(0),a(190)),i={id:"example2",title:"Multi container with shared data",sidebar_label:"Multi container with shared data"},l={id:"aws/examples/example2",title:"Multi container with shared data",description:"Purpose:",source:"@site/docs/aws/examples/example2.md",permalink:"/docs-and-blog/docs/aws/examples/example2",sidebar_label:"Multi container with shared data",sidebar:"someSidebar",previous:{title:"Building and publishing images",permalink:"/docs-and-blog/docs/aws/examples/example1"},next:{title:"Deploying to EB and ECS + seeded volume",permalink:"/docs-and-blog/docs/aws/examples/example3"}},c=[{value:"1. Create images and a shared volume",id:"1-create-images-and-a-shared-volume",children:[]},{value:"2. Pre-seed a volume with some data and then share that",id:"2-pre-seed-a-volume-with-some-data-and-then-share-that",children:[{value:"Anonymous volume",id:"anonymous-volume",children:[]},{value:"Named volumes",id:"named-volumes",children:[]}]},{value:"3. Local deploy with Elastic Beanstalk",id:"3-local-deploy-with-elastic-beanstalk",children:[{value:"Option 3",id:"option-3",children:[]}]}],p={rightToc:c};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Purpose:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Launch more than one container together by deploying multiple node APIs."),Object(o.b)("li",{parentName:"ul"},"Share data among containers"),Object(o.b)("li",{parentName:"ul"},"Seed data"),Object(o.b)("li",{parentName:"ul"},"Use Elastic Beanstalk's multi container option to deploy locally")),Object(o.b)("h2",{id:"1-create-images-and-a-shared-volume"},"1. Create images and a shared volume"),Object(o.b)("p",null,"We'll follow the ",Object(o.b)("strong",{parentName:"p"},"Microservice Architecture"),"."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create images for each api. Based on an existing Dockerfile we'll create images:\n",Object(o.b)("inlineCode",{parentName:"p"},"docker build --tag api-1 ."))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Run the first image with a shared volume\n",Object(o.b)("inlineCode",{parentName:"p"},"docker run -d --name api-1 -v my-shared-volume:/contains_api_1_data -p 8080:3000 api-1"),"\n-v option sets the volume, when running the image for api-2 we'll use the same volume and it'll be shared.\n",Object(o.b)("inlineCode",{parentName:"p"},"docker run -d --name api-2 -v my-shared-volume:/contains_api_2_data -p 8081:3000 api-2"),"\nNote that the port is different since it'll be the host port and cannot be shared.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Check that the volume is shared\nRun ",Object(o.b)("inlineCode",{parentName:"p"},"docker exec -it api-1 df -h")," and see that ",Object(o.b)("em",{parentName:"p"},"/contains_api_1_data")," is mapped to ",Object(o.b)("em",{parentName:"p"},"/dev/xvda1"),"\nIf we create something there, it'll be available for both containers:\n",Object(o.b)("inlineCode",{parentName:"p"},"docker exec -it api-1 touch /contains_api_1_data/api1.txt")," -> create file from api-1\n",Object(o.b)("inlineCode",{parentName:"p"},"docker exec -it api-2 ls /contains_api_2_data")," -> see file form api-2"))),Object(o.b)("h2",{id:"2-pre-seed-a-volume-with-some-data-and-then-share-that"},"2. Pre-seed a volume with some data and then share that"),Object(o.b)("p",null,"A volume created like in step 1.2. is temporary, initially empty."),Object(o.b)("p",null,"Two patterns ",Object(o.b)("strong",{parentName:"p"},"Anonymous volume")," vs ",Object(o.b)("strong",{parentName:"p"},"Named volume"),". Anonymous volume is not considered best practice."),Object(o.b)("h3",{id:"anonymous-volume"},"Anonymous volume"),Object(o.b)("p",null,"Create a brand new container (from an image like normal) who's sole purpose is to have it create a temporary (unnamed) volume during the build process. This volume can be pre-filled  with some data."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Create a directory with static data and a Dockerfile as follows:")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-docker"}),"FROM node:11-alpine\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\nVOLUME /the-shared-folder\nCOPY . /the-shared-folder\nCMD tail -f /dev/null # this will prevent the container from exiting\n")),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create and image and run it.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Re run the api images using the new volume (shared-data is the name of the previous container)\n",Object(o.b)("inlineCode",{parentName:"p"},"docker run -d --name api-1 --volumes-from shared-data -p 8080:3000 service-api"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Test that the volume folder is there.\n",Object(o.b)("inlineCode",{parentName:"p"},"docker exec -it service-api ls /"),"\nYou should see ",Object(o.b)("em",{parentName:"p"},"/the-shared-folder")))),Object(o.b)("h3",{id:"named-volumes"},"Named volumes"),Object(o.b)("p",null,"Create a named volume first outside of your main docker build process.  Then you reference it in a docker-compose file along with all your other settings."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Create a docker-compose file to orchestrate everything:")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),'version: "3.7"\nservices:\n  api-1:\n    image: api-1\n    networks:\n      - backend\n    ports:\n      - "8081:3000"\n    volumes:\n      - shared-data:/api-1_data\n\n  api-2:\n    image: api-2\n    networks:\n      - backend\n    ports:\n      - "8080:3000"\n    volumes:\n      - shared-data:/api-2_data\n\nvolumes:\n  shared-data:\n    external: "true"\n  \nnetworks:\n  backend:\n    driver: bridge\n')),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create the named volume\n",Object(o.b)("inlineCode",{parentName:"p"},"docker volume create shared-data"),"\nWith ",Object(o.b)("inlineCode",{parentName:"p"},"docker inspect shared-data")," you can check where the volume is stored (/var/lib/docker/volumes/shared-data/_data)")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Copy some files into that directory.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Run docker compose ",Object(o.b)("inlineCode",{parentName:"p"},"docker-compose up")," or ",Object(o.b)("inlineCode",{parentName:"p"},"docker-compose start")," (this wont hold the command line)"))),Object(o.b)("h2",{id:"3-local-deploy-with-elastic-beanstalk"},"3. Local deploy with Elastic Beanstalk"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"It uses docker-compose under the hood")),Object(o.b)("p",null,"3 main ways to deploy to beanstalk if you are deploying a single container to a host:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Create a Dockerfile to have Elastic Beanstalk build and run a custom image."),Object(o.b)("li",{parentName:"ol"},"Create a Dockerrun.aws.json file to deploy a Docker image from a hosted repository to Elastic Beanstalk."),Object(o.b)("li",{parentName:"ol"},"Create a .zip file containing your application files and any application file dependencies.  The Dockerfile and the Dockerrun.aws.json file.")),Object(o.b)("h3",{id:"option-3"},"Option 3"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Create a Dockerrun.aws.json file with the definition of the volume and the two containers."),Object(o.b)("li",{parentName:"ol"},"Initialize the configuration ",Object(o.b)("inlineCode",{parentName:"li"},'eb init -k vockey -p "64bit Amazon Linux 2018.03 v2.20.3 running Multi-container Docker 19.03.6-ce (Generic)" --region us-west-2 for_eb')),Object(o.b)("li",{parentName:"ol"},"Run locally ",Object(o.b)("inlineCode",{parentName:"li"},"eb local run"))))}s.isMDXComponent=!0},190:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),s=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l({},t,{},e)),a},d=function(e){var t=s(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(a),m=n,u=d["".concat(i,".").concat(m)]||d[m]||b[m]||o;return a?r.a.createElement(u,l({ref:t},p,{components:a})):r.a.createElement(u,l({ref:t},p))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);